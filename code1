from time import sleep
import json
import random
import hashlib

# Getting inputs

with open('Data.json') as json_file:
    data = json.load(json_file)

    fog_node_count = data['fog_node_count']
    end_node_count = data['end_node_count']
    latency_small = data['latency_small']
    latency_high = data['latency_high']
    number_of_miners = data['number_of_miners']

# Mining

class Cloud:

    def receive_message(self, message):
        pass


def mining(node, tasks):
    # do some calulations
    result = {
        "task_1": 2,
        "task_2": 1
    }

    return result

# Modelling the system

class Message:

    def __init__(self, tx, id, cluster):
        self.tx = tx
        self.id = id  # node id
        self.cluster = cluster  # fog id


class Node:

    def __init__(self, id):
        self.id = id
        self.fog_node = None
        self.buffer = list()
        self.connected_nodes = list()
        self.transactions = list()

    def connect(self, node):
        if isinstance(node, FogNode):
            self.fog_node = node

            self.connected_nodes.append(node)
            node.connected_nodes.append(self)

    def receive_message(self, message):
        self.buffer.append(message)

    def send_message(self, message):
        sleep(latency_small)
        self.fog_node.receive_message(Message(tx=message, id=self.id, cluster=self.fog_node.id))

    def __str__(self):
        if self.fog_node is not None:
            return str(self.fog_node) + "." + str(self.id)
        else:
            return str(self.id)


class FogNode(Node):

    cloud = Cloud()
    message_ids = dict()

    def receive_message(self, message):
        print(self, " received a message: ", message)

        self.buffer.append(message)
        self.send_message(message)

    def connect(self, node):
        if not isinstance(node, FogNode):
            node.fog_node = self

        self.connected_nodes.append(node)
        node.connected_nodes.append(self)

    def send_message(self, message):
        if isinstance(message, dict):  # from miners
            messages = dict()
            for key, value in message.items():
                original_key = message.get(self.message_ids[key])
                messages.update({original_key: value})

            self.cloud.receive_message(messages)

        elif message.cluster:  # from end nodes

            # for privacy
            key = random.randint(0, 10000000000)
            new_id = hashlib.sha3_256(str(key + message['id']).encode()).hexdigest()
            self.message_ids.update({new_id: message.id})
            message.id = new_id

            for i in range(number_of_miners):
                mining(self, message)

        else:  # from cloud
            pass
# Building the network

network = {
    "fog_nodes": set(),
    "nodes": set()
}

for generated_main_id in range(fog_node_count):
    fog_node = FogNode(generated_main_id + 1)
    for network_node in network['fog_nodes']:
        network_node.connect(fog_node)
    network['fog_nodes'].add(fog_node)
    for generated_sub_id in range(end_node_count):
        node = Node(generated_sub_id + 1)
        node.connect(fog_node)
        network['nodes'].add(Node)
