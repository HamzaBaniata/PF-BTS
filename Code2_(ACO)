import random
import numpy as np
import json

with open("input.json") as json_file:
    data = json.load(json_file)

    Num_Ants = data["Num_Ants"]
    Num_VMs = data["Num_VMs"]
    Num_Task = data["Num_Task"]
    Evaporation = data["Evaporation"]
    Best_Usage = data["Best_Usage"]
    One_min_Cost_of_VM = data["One_min_Cost_of_VM"]
    Best_Cost = data["Best_Cost"]
variable = 1000
Tasks = []
VMs = []
best_Ant_assignment = np.ones((Num_Task, Num_VMs))
for i in range(len(Tasks)):
    for j in range(len(VMs)):
       best_Ant_assignment[i,j] = variable
result = Num_Task/ Num_VMs
usage = 0
Cost = 0
Best_Ant = 0
Pheromon_Matrix = np.ones((Num_Task, Num_VMs))

def find_assignment(arr):
    row_count = len(arr[:])
    col_count = len(arr[:][0])
    result = list()
    for i in range (row_count):
        for k in range (col_count):
            if arr[i,k] > 0:
                result.append((i+1, k+1))
    return result

def sumRow(m, row):
    sum = 0
    for i in range(len(VMs)):
        sum = sum + m[row-1][i]
    return sum

def sumColumn(m, Column):
    sum = 0
    for i in range(len(Tasks)):
        sum = sum + m[i][Column-1]
    return sum

def changePheromoneMatrixToLocal(v):
    max_row = 0
    max_index = 0
    v_modified = np.zeros((Num_Task, Num_VMs))
    for i in range(len(Tasks)):
        max_value = 0
        for j in range(len(VMs)):
            if v[i-1][j-1] > max_value:
                max_value = v[i-1][j-1]
                max_row = i-1
                max_index = j-1
        v_modified[max_row][max_index] = 1
    print("The localized Pheromon Matrix is :")
    print(v_modified)
    return v_modified

for l in range(Num_Task):
    # generate random wight for tasks
    Tasks.append(random.randint(100000000, 1000000000))
    print(str(l+1) + ". " + str(Tasks[l]))
print(str(Num_Task) + " tasks had been assigned random power consumption values.")

for i in range(Num_VMs):
    VMs.append((random.randint(1000000, 12000000)))
print("The processor's computational power of the available VMs: ", VMs)
Utilization_Matrix = np.zeros([len(Tasks), len(VMs)])
Best_schedule = np.zeros([len(Tasks), len(VMs)])

for ut in range(Num_Task):
    for ut2 in range(Num_VMs):
        Utilization_Matrix[ut][ut2] = Tasks[ut]/int(VMs[ut2])
print("the utilization matrix is: ")
print(Utilization_Matrix)

for k in range(Num_Ants):
    print("\n\n*******\nAnt number " + str(k + 1) + " started\n*******\nthe local matrix is:")
    Local = np.zeros([len(Tasks), len(VMs)])
    while np.sum(Local) < Num_Task:
        index = random.randint(0, Num_VMs)
        rownum = random.randint(0, Num_Task)
        while sumColumn(Local, index) >= result or sumRow(Local, rownum) >= 1:
            index = random.randint(0, Num_VMs)
            rownum = random.randint(0, Num_Task)
        Local[rownum-1][index-1] = 1
    print(Local)
    for it in range(Num_VMs-1):
        Local_usage=np.max(np.sum(Utilization_Matrix * Local, axis=0))
        Local_iteration_matrix = Local
        for t in range(Num_Task):
                if Local_iteration_matrix[t, it] == 1:
                    Local_iteration_matrix[t,it-1] = 1
                    Local_iteration_matrix[t,it] = 0
                    if np.max(np.sum((Local_iteration_matrix * Utilization_Matrix), axis=0)) < Local_usage:
                        print("A new Local Matrix had been built:")
                        print(Local_iteration_matrix)
                        Local = Local_iteration_matrix
                        Local_usage = np.max(np.sum(Utilization_Matrix * Local, axis=0))
                    if ((np.max(np.sum((Local_iteration_matrix * Utilization_Matrix), axis=0))) < (np.max(np.sum((changePheromoneMatrixToLocal(best_Ant_assignment) * Utilization_Matrix), axis=0)))):
                        best_Ant_assignment = Local_iteration_matrix
                        Best_Ant = k
    for t in range(len(Tasks)):
        for p in range(len(VMs)):
            if Local[t, p] != 0:
                mod = sumRow(Pheromon_Matrix, t)
                if mod == 0:
                    mod = Num_VMs*Num_Task/1000
                Prob = Pheromon_Matrix[t][p] / mod
                Pheromon_Matrix[t][p] = Pheromon_Matrix[t][p] + (1 / Num_Ants) + Prob
    print("The pheromon matrix has been updated as follows: ")
    Pheromon_Matrix = (1-Evaporation) * Pheromon_Matrix
    print(Pheromon_Matrix.reshape(Num_Task,Num_VMs))
    print(" Ant Number: " + str(k + 1) + " finished its iterations.")
Time_consumption = np.max(np.sum(Utilization_Matrix * changePheromoneMatrixToLocal(Pheromon_Matrix), axis=0))
Cost = Time_consumption * One_min_Cost_of_VM * Num_VMs / 60
Best_Usage = Time_consumption
Best_Cost = Cost
Best_schedule = Utilization_Matrix * changePheromoneMatrixToLocal(Pheromon_Matrix)
print("The suggested assignment by the majority of ants:")
print(find_assignment(Best_schedule))
print("\nThe time consumption of the virtual machines to perform the requested tasks equals: ")
print(str(Best_Usage) + " seconds" + "\n         = " + str(Best_Usage/60) + " minutes \n         = " + str(Best_Usage/3600) + " hours.")
print("Total estimate cost of VMs in the cloud = ")
print(str(Best_Cost) + " $")
print("The best individule assignment by ant number " + str(Best_Ant+1) + ", with Time consumption of: (" + str(np.max(np.sum(Utilization_Matrix * changePheromoneMatrixToLocal(best_Ant_assignment), axis=0))) + ") is:")
print(find_assignment(changePheromoneMatrixToLocal(best_Ant_assignment)))
